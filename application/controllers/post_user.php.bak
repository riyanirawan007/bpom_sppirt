<?php
/** 
*	Author		: Hifshan Riesvicky
* 	From		: Gunadarma University
*	Filename	: post_user.php
*/
class Post_user extends APP_Controller{
	/**
	* Function __construct (GET)
	* This file provided for auth controller
	* Function __construct for initialize login view
	* @return void 
	*/
	public function __construct(){
		// Initialize home
		parent::__construct();
		return $this->load->model('auth');	
	}
		
	/**
	* Function postLogIn (POST)
	* This function will post the LogIn parameter
	* into the model and check out
	* the raw data inside database
	* @return void 
	*/
	public function postLogIn(){
		// Load form and url helper to use form validation
		$this->load->helper(array('form', 'url'));
		$this->load->library('form_validation');

		// this statements are about username and password major rules
		$this->form_validation->set_rules('uname', 'Username', 'required|min_length[4]');
		$this->form_validation->set_rules('password', 'Password', 'required');
	
		// if validator rules are rejected by user
		if ($this->form_validation->run() == FALSE)	{
			// rejected rule occurs an error. so this statement initialize the error message into session called errors
			$this->session->set_flashdata('errors', validation_errors());
			// get back into user login page and show the error validator message
			redirect('home/index');
		}
		else	{
			// check login statement into auth model whether both of username and password are match or not
			$check 	= $this->checkLogIn();
			//print_r($check); exit;
			// if check login statement doesn't return NULL value, in other words, both username and password have matched
			if($check != 0){			
				// User token initialize to session data
				$data	= array(
					'user_token'			=> 1,
					'user_id'				=> $check[0]->id_user,
					'user_name'			=> $check[0]->username,
					'user_segment'		=> $check[0]->id_r_hak_akses,
					'code'				=> $check[0]->code, //Dinkes 1 Provinsi, Dinkes 2 Kota
					'user_right_access'	=> $this->auth->identifyRightAccess($check[0]->id_r_hak_akses),
					'login'					=> TRUE
				);
				// Set user data
				$this->session->set_userdata($data);
				if($this->addCookie()){
					// set information about user successful message in order to login event
					$this->session->set_flashdata('message', '<div class="alert alert-info"><strong>Awesome! </strong> You have entered this admin site</div>');
					// Furthermore, user redirected by system to home which equal to user segment				
					redirect('home/index');
				}
			}
			
			// set information about user error message in order to login event
			$this->session->set_flashdata('message', '<div class="alert alert-danger"><strong>Caution! </strong> You could not enter our system. your username or password doesn`t match</div>');
			// Else redirect into login
			redirect('home/index');
		}
		
	}
		
	/**
	* Function postRegister (POST)
	* This function will post the register 
	* parameter into database and collect it
	* @return void 
	*/	
	public function postRegister(){
			// Load form and url helper to use form validation
			$this->load->helper(array('form', 'url'));
			$this->load->library('form_validation');
	
			// this statements are about username and password major rules
			$this->form_validation->set_rules('uname', 'Username', 'required|min_length[4]|max_length[30]');
			$this->form_validation->set_rules('password', 'Password', 'required|matches[password_again]');
			$this->form_validation->set_rules('password_again', 'Password Confirmation', 'required');
			$this->form_validation->set_rules('hak_akses', 'Right Access', 'required');
		
			// if validator rules are rejected by user
			if ($this->form_validation->run() == FALSE)	{
				// rejected rule occurs an error. so this statement initialize the error message into session called errors
				$this->session->set_flashdata('errors', validation_errors());
				// get back into user login page and show the error validator message
				redirect('home/register');
			}
			else	{
				// If user has been registered into database
				if($this->auth->register()){
					// Set the user info to shows up within user interface later
					$this->session->set_flashdata('message', '<div class="alert alert-info"><strong>Awesome! </strong> You have registered new user into database</div>');
				}else{
					// set information about user error message in order to login event
					$this->session->set_flashdata('message', '<div class="alert alert-danger"><strong>Caution! </strong> You could not register some user. Please try again later</div>');
				}
				// if register has done, redirect into register page
				redirect('home/register');	
			}
	}
	
	/**
	* Function checkLogIn (POST)
	* This function shall check the login user state
	* into auth model
	* and return the result as array
	* @return array or integer
	*/
	public function checkLogIn(){
		$check 		= $this->auth->checkLogIn();	
		
		// if check login returns 1 row
		if($check->num_rows())
			return $check->result();
		// Else return NULL
		return 0;
	}
	
	/**
	* Function  postEditUser (POST)
	* This function shall post the statements inside
	*  function to edit user's field which has id_user as a hidden variable
	* @return array or integer
	*/
	public function postEditUser(){
			// Hidden input to make sure that's id user has delivered as parameter
			$user 	= $this->input->post('id_user');
			// Load form and url helper to use form validation
			$this->load->helper(array('form', 'url'));
			$this->load->library('form_validation');
	
			// this statements are about username and password major rules
			$this->form_validation->set_rules('uname', 'Username', 'required|min_length[4]|max_length[30]');
			$this->form_validation->set_rules('password', 'Password', 'required|matches[password_again]');
			$this->form_validation->set_rules('password_again', 'Password Confirmation', 'required');
			$this->form_validation->set_rules('hak_akses', 'Right Access', 'required');
		
			// if validator rules are rejected by user
			if ($this->form_validation->run() == FALSE)	{
				// rejected rule occurs an error. so this statement initialize the error message into session called errors
				$this->session->set_flashdata('errors', validation_errors());
				// get back into user editUser page and show the error validator message
				redirect('home/editUser/'.$user);
			}
			else	{
				// If user has been registered into database
				if($this->auth->editUser($user)){
					// Set the user info to shows up within user interface later
					$this->session->set_flashdata('message', '<div class="alert alert-info"><strong>Selamat! </strong> Data berhasil diubah</div>');
				}else{
					// set information about user error message in order to login event
					$this->session->set_flashdata('message', '<div class="alert alert-danger"><strong>Perhatian! </strong> Data gagal diubah</div>');
				}
				// if register has done, redirect into register page
				redirect('home/editUser/'.$user);	
			}
	}
	
	public function cek_email(){
		$cek = $this->db->query("select * from tabel_login_user where email = '".$this->input->post('email')."'")->result_array();
		if(count($cek)==0){
			$this->session->set_flashdata('errors', '<div class="alert alert-danger">Maaf! Email tidak terdaftar </div>');
		} else {
			// Configure email library
			
			$name = 'Admin Sistem Pelaporan Keamanan Pangan Online';
			$subject = 'Lupa Password Sistem Pelaporan Keamanan Pangan Online';
			$receiver_email = $this->input->post('email');
			
			foreach($cek as $row){
				$username = $row['username'];
				$password = $row['password'];
			}
			$message = "Halo, $username<br><br>Kami telah menerima permintaan password Anda pada sistem keamanan pangan online. berikut data akun Anda :<br>Username : $username <br>Password : $password <br><br>Terima kasih atas partisipasi Anda.";
			
			include("send_email.php");
			
		}
		
		
		redirect('home/lupa_password');	
	}
	
}
?>